<?php

/**
 * Implementation of hook_block().
 */
function smartlink_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
      case 'list':
        $blocks = array();

        // Block for completeness of the current node.
        $blocks['smartlink_user']['info'] = t('Smartlink: current user');
        $blocks['smartlink_user']['cache'] = BLOCK_NO_CACHE;

        // Block with link to apply for this smartlink.
        $blocks['smartlink_apply']['info'] = t('Smartlink: apply links');
        $blocks['smartlink_apply']['cache'] = BLOCK_NO_CACHE;

        return $blocks;
      case 'view':
        // Single node completeness (only displayed on full page view of the node)
        if ($delta == 'smartlink_user') {
          $node_menu = menu_get_object();
          $node = node_load($node_menu->nid);
          global $user;
          
          $recalculate = FALSE;
          $data = smartlink_get_data_user($user, $node, $recalculate);
          $block['subject'] = t('Smartlink current user');
          $block['content'] = theme('smartlink_user', $data);
        }
        
        if ($delta == 'smartlink_apply') {
          $node_menu = menu_get_object();
          $block['subject'] = t('Apply');
          if (user_is_anonymous()) {
            $destination = 'node/'.$node_menu->nid.'/apply';
            $block['content'] = t('<a href="@login">Login</a> or <a href="@register">register</a> to apply', array(
              '@login' => url('user/login', array('query' => array('destination' => $destination))),
              '@register' => url('user/register', array('query' => array('destination' => $destination))),
            ));
          } else {
            $url = 'node/'.$node_menu->nid.'/apply';
            $block['content'] = l('Apply', $url);
          }
            
        }

        return $block;
    }
}

/**
 * Implementation of hook_form_alter().
 *
 * @see smartlink_node_type_delete_confirm_submit()
 * @see smartlink_content_field_remove_form_submit()
 */
function smartlink_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#node']) && $form['#node']->type .'_node_form' == $form_id && is_content_profile($form['#node']) && arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == 'apply') {
    // Hide preview and delete buttons
    $form['buttons']['preview']['#access'] = FALSE;
    $form['buttons']['delete']['#access'] = FALSE;
    $form['buttons']['submit']['#value'] = t('Apply');
    $form['#redirect'] = $_GET['q']; // redirect to same page
    $form['#submit'][] = 'smartlink_form_apply_submit'; // Add extra submit function

    $smartlink_node = node_load(arg(1));
    global $user;
    
    $data = smartlink_get_data_user($user, $smartlink_node);
    $type = $form['#node']->type;

    $form_state['storage']['smartlink_nid'] = $smartlink_node->nid;
    $form_state['storage']['smartlink_uid'] = $user->uid;

    // Unset fields we don't need for this smartlink
    $fields = array_keys($form['#field_info']);
    $fields_smartlink = array();
    foreach ($data['fields'] as $i => $field) {
      if ($field['type_name'] == $type) {
        $fields_smartlink[] = $field['field_name'];

        if ($field['required']) {
          $form[$field['field_name']]['#required'] = TRUE;
          if (isset($form[$field['field_name']][0])) { // no idea why we have to set the nested value too
            $form[$field['field_name']][0]['#required'] = TRUE;
          }
        }
        

        if (!$field['completed'] && empty($form_state['post'])) {
          form_set_error($field['field_name'], t('Fill out !field for +!percent%', array('!field' => $field['label'], '!percent' => $field['percent_complete'])));
        }
      }
    }
    $fields_unset = array_diff($fields, $fields_smartlink);
    foreach ($fields_unset as $field) {
      unset($form[$field]);
    }
  }

  // If a content type is deleted, delete also all its entries in the database; hook onto submit function
  if ($form_id == 'node_type_delete_confirm') {
    $form['#submit'][] = 'smartlink_node_type_delete_confirm_submit';
  }

  // If a field from a content type is deleted, delete the entry in the database; hook onto submit function
  if ($form_id == 'content_field_remove_form') {
    $form['#submit'][] = 'smartlink_content_field_remove_form_submit';
  }

    // Content type settings form
  if ($form_id == 'node_type_form' && user_access('administer smartlinks')) {
    $form['smartlink'] = array(
      '#type' => 'fieldset',
      '#title' => t('Smartlink'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['smartlink']['smartlink'] = array(
      '#type' => 'radios',
      '#title' => t('Smartlink'),
      '#default_value' => variable_get('smartlink_'. $form['#node_type']->type, 0),
      '#options' => array(t('Disabled'), t('Enabled')),
      '#description' => t('Enable the smartlink feature for this content type.'),
    );
  }
}

function smartlink_form_apply_submit($form, &$form_state) {
  smartlink_set_applied_user_smartlink($form_state['storage']['smartlink_uid'], $form_state['storage']['smartlink_nid']);
}

function smartlink_set_applied_user_smartlink($uid, $nid) {
  $first_time = FALSE;
  $record = db_fetch_object(db_query("SELECT * FROM {smartlink} WHERE nid = %d AND uid = %d", $nid, $uid));
  if (!$record) {
    $record = new stdClass();
    $record->nid = $nid;
    $record->uid = $uid;
    $record->is_new = TRUE;
    $record->created = time();
    $first_time = TRUE;
  } else {
    $record->is_new = FALSE;
    if (!$record->created) {
      $record->created = time();
      $first_time = TRUE;
    }
  }

  $record->applied = 1;
  $record->changed = time();

  if ($record->is_new) {
    drupal_write_record('smartlink', $record);
  } else {
    drupal_write_record('smartlink', $record, array('nid', 'uid'));
  }

  // Notify Rules
  if (module_exists('rules')) {
    $smartlink_node = node_load($nid);
    $user = user_load($uid);

    if ($first_time) {
      rules_invoke_event('smartlink_user_applied_firsttime', $smartlink_node, $user);
    }

    rules_invoke_event('smartlink_user_applied', $smartlink_node, $user);
  }
}


function smartlink_set_invited_user_smartlink($uid, $nid) {
  $record = db_fetch_object(db_query("SELECT * FROM {smartlink} WHERE nid = %d AND uid = %d", $nid, $uid));
  if (!$record) {
    $record = new stdClass();
    $record->nid = $nid;
    $record->uid = $uid;
    $record->is_new = TRUE;
  } else {
    $record->is_new = FALSE;
  }

  $record->invited = 1;

  if ($record->is_new) {
    drupal_write_record('smartlink', $record);
  } else {
    drupal_write_record('smartlink', $record, array('nid', 'uid'));
  }

  // Notify Rules
  if (module_exists('rules')) {
    $smartlink_node = node_load($nid);
    $user = user_load($uid);
    rules_invoke_event('smartlink_user_invited', $smartlink_node, $user);
  }
}

/**
 * Submit function called when a node type is deleted. Remove the node type from
 * the smartlink table as well.
 *
 * @see smartlink_form_alter()
 */
function smartlink_node_type_delete_confirm_submit($form, &$form_state) {
  if (isset($form['type']['#value'])) {
    $type = $form['type']['#value'];

    if (smartlink_enabled_type($type)) {
      variable_del('smartlink_'. $type);
    }
  }
}

/**
 * Submit function called when a CCK field is deleted. Remove the field from
 * the smartlink table as well.
 *
 * @see smartlink_form_alter()
 */
function smartlink_content_field_remove_form_submit($form, &$form_state) {
//  if (isset($form['type_name']['#value']) && isset($form['field_name']['#value'])) {
//    $type = $form['type_name']['#value'];
//
//    if (smartlink_enabled_type($type)) {
//      $field_name = $form['field_name']['#value'];
//      $fields = variable_get('smartlink_fields_'. $type, array());
//
//      $nr_fields = count($fields);
//      for ($i = 0; $i < $nr_fields; $i++) {
//        if ($fields[$i] == $field_name) unset($fields[$i]);
//      }
//
//      // a content complete enabled field has been deleted: remove from database and clean cache
//      if (count($fields) < $nr_fields) {
//        variable_set('smartlink_fields_'. $type, $fields);
//        db_query("DELETE FROM {smartlink} c INNER JOIN {node} n ON c.nid = n.nid WHERE n.type = '%s'", $type);
//        drupal_set_message(t('A field enabled for content completion has been deleted. You need to <a href="@cache">rebuild your cache</a> to reflect the correct completion percentage.', array('@cache' => url('admin/content/smartlink'))), 'warning');
//      }
//    }
//  }
}

/**
 * Menu access callback.
 *
 * @param $action
 *   One of 'apply to'.
 * @param $param
 *   Node object.
 */
function smartlink_access($action, $param) {
  // Check for permissions if node type is smartlink-enabled and user has permissions for the given action, otherwise return FALSE.
  if (smartlink_enabled_type($param)) {
    if (user_access('administer smartlinks') || user_access($action .' smartlinks')) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Implementation of hook_perm().
 */
function smartlink_perm() {
  $perms = array(
    'administer smartlinks',
    'apply to smartlinks',
  );
  return $perms;
}

/**
 * Implementation of hook_menu().
 */
function smartlink_menu() {
  $items = array();

  $items['node/%node/apply'] = array(
    'title' => 'Apply',
    'page callback' => 'smartlink_apply_form',
    'page arguments' => array(1),
    'access callback' => 'smartlink_access',
    'access arguments' => array('apply to', 1),
    'file' => 'smartlink.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  $items['node/%node/calculate'] = array(
    'title' => 'Calculate',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('smartlink_calculate_tab_form', 1),
    'access callback' => 'smartlink_access',
    'access arguments' => array('administer', 1),
    'file' => 'smartlink.pages.inc',
    'type' => MENU_LOCAL_TASK,
    'weight' => 20,
  );

//  $items['node/%node/apply/%user_uid_optional'] = array(
//    'title' => 'Apply',
//    'page callback' => 'smartlink_apply_form_type',
//    'page arguments' => array(1),
//    'access callback' => 'smartlink_access',
//    'access arguments' => array('apply to', 1),
//    'file' => 'smartlink.pages.inc',
//    'type' => MENU_LOCAL_TASK,
//    'weight' => 10,
//  );
//
//    $items['node/%node/apply/%user_uid_optional/personal'] = array(
//      //'title callback' => 'check_plain',
//      'title' => 'Personal',
//      'page callback' => 'smartlink_apply_form_type',
//      'page arguments' => array(1,4),
//      'access callback' => 'smartlink_access',
//      'access arguments' => array('apply to', 1),
//      'file' => 'smartlink.pages.inc',
//      'type' => MENU_DEFAULT_LOCAL_TASK,
//      'weight' => 10,
//    );
//
//        $items['node/%node/apply/%user_uid_optional/business'] = array(
//      //'title callback' => 'check_plain',
//      'title' => 'Business',
//      'page callback' => 'smartlink_apply_form_type',
//      'page arguments' => array(1,4),
//      'access callback' => 'smartlink_access',
//      'access arguments' => array('apply to', 1),
//      'file' => 'smartlink.pages.inc',
//      'type' => MENU_LOCAL_TASK,
//      'weight' => 10,
//    );



  
  return $items;
}

/**
 * Implementation of hook_nodeapi().
 */
function smartlink_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if (smartlink_applied_type($node->type)) {
    switch ($op) {
      case 'insert':
      case 'update':
        // TODO we need to be smarter here and should not update score of this node for every single smartlink in the system
        // Use cron job/batch API/drush... idea: launch something in the background that does not block page loading here
        // Not nice: load the user that owns this profile to know what we need to rebuild
        $user = user_load($node->uid);
        foreach (smartlink_get_enabled_types() as $type) {
          $result = db_query('SELECT nid FROM {node} WHERE type = "%s"', $type);
          while ($nid = db_fetch_object($result)) {
            $smartlink_node = node_load($nid->nid);
            smartlink_get_data_user($user, $smartlink_node, TRUE);
          }
        }
        break;

      case 'delete':
        // Remove the cache
        db_query('DELETE FROM {smartlink} WHERE uid = %d', $node->uid);
        break;
    }
  }

  if (smartlink_enabled_type($node->type)) {
    switch ($op) {
      case 'insert':
      case 'update':
        drupal_set_message(t('Please !link this smartlink', array(
          '!link' => l(t('recalculate'), 'node/'. $node->nid . '/calculate'),
        )), 'warning');

//        t('Fill out <i>!nextfield</i> for +!percent_complete%', array(
//        '!nextfield' => l(t($field['label']), 'node/'. $data['nid'] .'/apply/'. $field['type_name']),
//        '!percent_complete' => $field['percent_complete'],


        break;
      case 'delete':
        // Remove the cache
        db_query('DELETE FROM {smartlink} WHERE nid = %d', $node->nid);
        break;
    }
  }
}

/**
 * Implementation of hook_user().
 */
function smartlink_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'delete':
      db_query('DELETE FROM {smartlink} WHERE uid = %d', $account->uid);
      break;
  }
}

/**
 * Batch helper.
 */
function smartlink_batch_set($smartlink_nid) {
  $batch = array(
    'title' => t('Calculate smartlink'),
    'operations' => array(
      array('smartlink_batch', array($smartlink_nid)),
    ),
    'finished' => 'smartlink_batch_calculate_smartlink_finished',
    'init_message' => t('The Smartlink calculation is beginning.'),
    'error_message' => t('The Smartlink calculation encountered an error.'),
  );
  batch_set($batch);
}

/**
 * Batch callback.
 */
function smartlink_batch($smartlink_nid, &$context) {
  // How many user calculations to process in each batch.
  $limit = 50;
  $smartlink_node = node_load($smartlink_nid);

  // Initialize sandbox the first time through.
  if (!isset($context['sandbox']['progress'])) {
    // Clear the cache, we will rebuild it entirely.
    // smartlink_clear_cache($smartlink_nid);

    // Count the number of cache rebuilds we will have to do.
    $max = db_result(db_query('SELECT count(uid) FROM {users}'));
    $max = $max - 1; // we should not count user 0 who is there for some stupid reason

    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_uid'] = 0;
    //$context['sandbox']['list'] = $list;
    $context['sandbox']['max'] = $max;

  }

  // Retrieve range of nids to rebuild cache for
  $result = db_query_range(
    'SELECT uid FROM {users} WHERE uid > %d ORDER BY uid ASC',
    $context['sandbox']['current_uid'], 0, $limit
  );

  // Loop over all the nodes to process.
  while ($uid = db_fetch_object($result)) {

    // Rebuild the cache, the actual operation.
    $user = user_load($uid->uid);
    smartlink_get_data_user($user, $smartlink_node, TRUE);

    // Store some result for post-processing in the finished callback.
    $context['results'][] = $user->uid;

    // Update progress information.
    $context['sandbox']['progress']++;
    $context['sandbox']['current_uid'] = $user->uid;
    $context['message'] = t('Calculating smartlink for user %uid', array('%uid' => $user->uid));
  }

  // Let the batch engine know how close we are to completion.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implementation of hook_field_info().
 */
function smartlink_field_info() {
  return array(
    'smartlink' => array(
      'label' => t('Smartlink'),
      'description' => t('Store a smartlink to another CCK field that can have preferred values, a relative percentage for completion and required attribute.'),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function smartlink_field_formatter_info() {
  return array(
    'default' => array(
      'label' => t('Smartlink (default)'),
      'field types' => array('smartlink'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_field_settings().
 */
function smartlink_field_settings($op, $field) {
  switch ($op) {
    case 'form':

      $options = smartlink_get_field_content_types_options();

      $form['ctypes'] = array(
        '#tree' => TRUE,
        '#type' => 'checkboxes',
        '#title' => t('Content Profile Types'),
        '#default_value' => $field['ctypes'],
        '#options' => $options,
        '#description' => t('Check the content types of which the fields can be selected in this smartlink'),
      );
      return $form;

    //case 'validate':

    case 'save':
      return array('ctypes');

    case 'database columns':
      return array(
        'field_name' => array('type' => 'varchar', 'length' => 255, 'not null' => FALSE, 'sortable' => TRUE),
        'operator' => array('type' => 'varchar', 'length' => 10, 'not null' => FALSE, 'sortable' => TRUE),
        'value' => array('type' => 'text', 'size' => 'big', 'not null' => FALSE),
        'percentage' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
        'required' => array('type' => 'int', 'not null' => FALSE, 'sortable' => TRUE),
      );


    //case 'views data':
  }
}

/**
 * Implementation of hook_field().
 */
function smartlink_field($op, &$node, $field, &$items, $teaser, $page) {
  switch ($op) {
//    case 'load':
//      return _smartlink_load($field, $items);

//    case 'validate':
//      $optional_field_found = FALSE;
//      if ($field['validate_url'] !== 0 || is_null($field['validate_url']) || !isset($field['validate_url'])) {
//        foreach ($items as $delta => $value) {
//          _link_validate($items[$delta], $delta, $field, $node, $optional_field_found);
//        }
//      }
//
//      if ($field['url'] == 'optional' && $field['title'] == 'optional' && $field['required'] && !$optional_field_found) {
//        form_set_error($field['field_name'] .'][0][title', t('At least one title or URL must be entered.'));
//      }
//      break;

//    case 'presave':
//      foreach ($items as $delta => $value) {
//        _smartlink_process($items[$delta], $delta, $field, $node);
//      }
//      break;

//    case 'sanitize':
//      foreach ($items as $delta => $value) {
//        _link_sanitize($items[$delta], $delta, $field, $node);
//      }
//      break;
  }
}

/**
 * Implementation of hook_widget_info().
 *
 * Here we indicate that the content module will handle
 * the default value and multiple values for these widgets.
 *
 * Callbacks can be omitted if default handing is used.
 * They're included here just so this module can be used
 * as an example for custom modules that might do things
 * differently.
 */
function smartlink_widget_info() {
  return array(
    'smartlink' => array(
      'label' => t('Smartlink (select list of CCK fields)'),
      'field types' => array('smartlink'),
      'multiple values' => CONTENT_HANDLE_CORE,
    ),
  );
}

/**
 * Implementation of hook_content_is_empty().
 */
function smartlink_content_is_empty($item, $field) {
  if (empty($item['field_name'])) {
    return TRUE;
  }
  return FALSE;
}

function smartlink_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  $options = array(
    '' => '', // add empty option
  );

  $types = content_types();
  foreach ($field['ctypes'] as $ctype) {
    $label = $types[$ctype]['name'];
    $options[$label] = smartlink_get_fields_options($ctype);
  }

  $options_operator = array(
    '' => '',
    'eq' => t('='),
    'neq' => t('!='),
    'geq' => t('>='),
    'leq' => t('<='),
  );

  $element['field_name'] = array(
    '#title' => t('Field'),
    '#type' => 'select',
    //'#type' => 'checkboxes',
    '#default_value' => isset($items[$delta]['field_name']) ? $items[$delta]['field_name'] : NULL,
    '#options' => $options,
    '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
  );

  $element['operator'] = array(
    '#title' => t('Operator'),
    '#type' => 'select',
    '#default_value' => isset($items[$delta]['operator']) ? $items[$delta]['operator'] : NULL,
    '#options' => $options_operator,
        '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
  );

  $element['value'] = array(
    '#title' => t('Value'),
    '#type' => 'textfield',
    '#size' => 20,
    '#maxlength' => 20,
    '#default_value' => isset($items[$delta]['value']) ? $items[$delta]['value'] : NULL,
//    '#description' => 'Put a value here, e.g. a score',
    '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
  );

  $element['percentage'] = array(
    '#title' => t('%'),
    '#type' => 'textfield',
    '#size' => 3,
    '#maxlength' => 3,
    //'#description' => 'Relative percentage of this field for calculation of total score.',
    '#default_value' => isset($items[$delta]['percentage']) ? $items[$delta]['percentage'] : 100,
    '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
  );

  $element['required'] = array(
    '#title' => t('Required?'),
    '#type' => 'checkbox',
//    '#description' => 'Mark field as required in the completion of the smartlink.',
    '#default_value' => isset($items[$delta]['required']) ? $items[$delta]['required'] : FALSE,
    '#prefix' => '<div style="float:left">',
    '#suffix' => '</div>',
  );

  return $element;
  /*
  // Imagine we want to show a birthday field
  $selected_field_name = 'field_pp_hobbies';
  $selected_field = content_fields($selected_field_name, 'personal');

//      $form['#node'] = (object)array('type' => '', $settings['field_name'] => $settings['value']);
//    $form['#field_info'][$field['field_name']] = $field;
//    // We can't put it into $form['settings'] as this would break AHAH callbacks
//    $form += (array) content_field_form($form, $form_state, $field);
//    $form[ $settings['field_name'] ]['#weight'] = 4;
//
//    unset($form['#cache']);


  //$form = $form;
  //$form2['#node'] = (object)array('type' => '', $selected_field_name => $selected_field_name);
  $form['#field_info'][$selected_field['field_name']] = $selected_field;
    // We can't put it into $form['settings'] as this would break AHAH callbacks
  $form = (array) content_field_form($form, $form_state, $selected_field);
  //$element += $form;
  //$form += $element;
  //$form +=
  //$form[ $settings['field_name'] ]['#weight'] = 4;

  //$element['whatever'] = $selected_field_form[$selected_field_name];


  //$element['whatever'] = optionwidgets_widget($form, $form_state, $selected_field, 'aaa');
  */
}

/**
 * Get all content types that have been tagged.
 *
 * @return
 *   Array of content types.
 */
function smartlink_get_enabled_types() {
  $types = node_get_types('names');
  $tagged_types = array();
  foreach ($types as $type => $name) {
    if (variable_get('smartlink_'. $type, 0)) {
     $tagged_types[$type] = $name;
    }
  }
  return $tagged_types;
}

function smartlink_applied_type($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return in_array($type, array_keys(smartlink_get_field_content_types_options()));
}

/**
 * Determine if a given node type is a smartlink node type.
 *
 * @param $type
 *   The node object or the node's type
 */
function smartlink_enabled_type($type) {
  if (is_object($type)) {
    $type = $type->type;
  }
  return variable_get('smartlink_'. $type, 0);
}

/**
 * Implementation of hook_theme().
 */
function smartlink_theme() {
  $path = drupal_get_path('module', 'smartlink') .'/theme';
  return array(
    'smartlink_formatter_default' => array(
      'arguments' => array('element' => NULL),
    ),
    'smartlink' => array(
      'arguments' => array('element' => NULL),
    ),
    'smartlink_user' => array(
      'arguments' => array('data' => NULL),
      'file' => 'theme.inc',
      'path' => $path,
    )
  );
}

/**
 * Theme function for 'default' smartlink field formatter.
 */
function theme_smartlink_formatter_default($element) {
  $field_name = empty($element['#item']['field_name']) ? '' : check_plain($element['#item']['field_name']);
  $operator = empty($element['#item']['operator']) ? '' : check_plain($element['#item']['operator']);
  $value = empty($element['#item']['value']) ? '' : check_plain($element['#item']['value']);
  $percentage = empty($element['#item']['percentage']) ? '' : check_plain($element['#item']['percentage']);
  $required = empty($element['#item']['required']) ? '' : check_plain($element['#item']['required']);

  $output = '';
  $output .= '<div class="smartlink-item">';
  $output .= '<div class="smartlink-field-name">'. $field_name .'</div>';
  $output .= '<div class="smartlink-operator">'. $operator .'</div>';
  $output .= '<div class="smartlink-value">'. $value .'</div>';
  $output .= '<div class="smartlink-percentage">'. $percentage .'</div>';
  $output .= '<div class="smartlink-required">'. $required .'</div>';
  $output .= '</div>';
  
  return $output;
}


/**
 * FAPI theme for an individual text elements.
 */
function theme_smartlink($element) {
  return $element['#children'];
}

/**
 * Return content types that can be used in the smartlink.
 * @return string
 */
function smartlink_get_field_content_types_options() {
  $types = content_types();
  $options = array();
  foreach ($types as $type => $data) {
    if (is_content_profile($type)) {
      $options[$type] = $data['name'];
    }
  }
  return $options;
}

function smartlink_get_fields_options($content_type) {
  $result = array();
  $fields = smartlink_get_fields($content_type);
  foreach ($fields as $field_name => $data) {
    $result[$field_name] = $data['label'];
  }
  return $result;
}

function smartlink_get_fields($content_type) {
  $types = content_types();
  $type = $types[$content_type];
  $fields = array();

  /**
   * Add CCK fields of this ctype
   */
  if (isset($type['fields'])) {
    foreach ($type['fields'] as $code => $data) {
      $label = (isset($data['widget']['label'])) ? $data['widget']['label'] : $code;
      $data['label'] = $label;

      // Find db storage information; will be used by Views
      $db_info = content_database_info($data);
      $columns = array();
      foreach ($db_info['columns'] as $column_title => $column_data) {
        $columns[] = $column_data['column'];
      }
      $data['columns'] = $columns;

      $fields[$code] = $data;
    }
  }

  return $fields;
}

/**
 * Fetch data for user, use cache if possible
 * 
 * @param <type> $user
 * @param <type> $smartlink_node
 * @param <type> $recalculate
 * @return <type>
 */
function smartlink_get_data_user($user, $smartlink_node, $recalculate = FALSE) {
  $data_raw = db_result(db_query("SELECT data from {smartlink} WHERE nid = %d AND uid = %d", $smartlink_node->nid, $user->uid));

  // If there is data and we are not being asked to recalculate, then just used the cached values
  if ($data_raw && !$recalculate) {
    $data = unserialize($data_raw);
  }
  // Else recalculate the completeness data
  else {
    $nodes = array();
    foreach (content_profile_get_types('names') as $type => $type_name) {
      $node = content_profile_load($type, $user->uid, '', $recalculate);
      $nodes[$type] = $node;
    }

    $data = smartlink_get_data($nodes, $smartlink_node, $recalculate);
    $data['uid'] = $user->uid;

    // Update the cache
    $record = db_fetch_object(db_query("SELECT * FROM {smartlink} WHERE nid = %d AND uid = %d", $smartlink_node->nid, $user->uid));
    if (!$record) {
      $record = new stdClass();
      $record->nid = $smartlink_node->nid;
      $record->uid = $user->uid;
      $record->is_new = TRUE;
    } else {
      $record->is_new = FALSE;
    }

    $record->data = serialize($data);
    $record->percent = $data['percent'];

    if ($record->is_new) {
      drupal_write_record('smartlink', $record);
    } else {
      drupal_write_record('smartlink', $record, array('nid', 'uid'));
    }
    
    // Notify Rules
    if (module_exists('rules')) {
      rules_invoke_event('smartlink_user_update', $smartlink_node, $user);
    }
  }

  // UPDATE EDIT PERMISSIONS HERE! they can't be cached

  return $data;
}


/**
 * Get the content complete percentage data for a given node or a whole content type.
 * All data is cached and recalculated only on demand.
 *
 * TODO: refactor part of this code into the preprocess function, see theme.inc
 *
 * @see theme_smartlink_profile_percent_complete()
 * @param $node
 *   The node object to calculate completion for.
 * @param $recalculate
 *   Recalculates the cached data.
 * @return
 *   An array of fields such as percentage complete, next field to be
 *   completed etc.
 */
function smartlink_get_data($nodes, $smartlink_node, $recalculate) {
  
  // fetch tagged fields with metadata from $node

  // compute completeness

  // return fields to be completed, fields to be completed, next field to be completed, percentage, actions per separate item (e.g.
  // adding picture will make profile +5%, ...) 

  //$fields = smartlink_get_fields($node->type); // Grab all fields for that content type
  $fields = smartlink_get_tagged_fields($smartlink_node); // Fields tagged for completeness (can be empty)
  //$values = smartlink_get_fields_values($node); // Completed fields (can be empty)

  $data = array();
  $data['nid'] = $smartlink_node->nid;

  // Compare the two arrays and compute percentages etc.
  foreach ($fields as $i => $field) {
    $node = $nodes[$field['type_name']];
    $data['fields'][] = _smartlink_calculate_score_field($node, $field, $smartlink_node);
  }

  _smartlink_calculate_score($data);  
  return $data;
}

function _smartlink_calculate_score_field($node, $smartlink_field, $smartlink_node) {
  $field_name = $smartlink_field['field_name'];
  $fields = smartlink_get_fields($node->type);
  $field = $fields[$field_name];

  $result = $smartlink_field;
  //$result['field_name'] = $field_name;
  //$result['label'] = $field['label'];
  //$result['type_name'] = $node->type;
  $result['nid'] = $node->nid;
  
  $result['score'] = 0;
  $result['completed'] = FALSE;
  $result['pass'] = TRUE;

  if (isset($node->{$field_name})) {

    $raw = $node->{$field_name};

    if (isset($field['module'])) { // This is a CCK field
      // We check for emptiness using the CCK hook hook_content_is_empty
      $function = $field['module'] .'_content_is_empty';
      if (isset($raw[0]) && !$function($raw[0], $field))  {
        $value = $raw[0]['value'];
        $result['score'] = $smartlink_field['percentage'];
        $result['completed'] = TRUE;


        // SCORE ENGINE
        $pass = TRUE;
        if (!empty($smartlink_field['operator']) && !empty($smartlink_field['value'])) {
          $smartlink_value = $smartlink_field['value'];
          switch ($smartlink_field['operator']) {
            case 'leq':
              $pass = ($value <= $smartlink_value) ? TRUE : FALSE;
              break;
            case 'geq':
              $pass = ($value >= $smartlink_value) ? TRUE : FALSE;
              break;
            case 'eq':
              $pass = ($value == $smartlink_value) ? TRUE : FALSE;
              break;
            case 'neq':
              $pass = ($value != $smartlink_value) ? TRUE : FALSE;
              break;
          }
        }

        $result['pass'] = $pass;
      }

      // SCORE THE FIELDS
      
    }
  }

  // TODO check edit permissions of this field!


  return $result;
}

function _smartlink_calculate_score(&$data) {
  $total_percentage = 0;
  //$pass = TRUE;
  foreach ($data['fields'] as $i => $field) {
    $total_percentage += $field['percentage'];
  }

  if ($total_percentage) {
    $score = 0;

    foreach ($data['fields'] as $i => &$field) {
      $score += $field['score'];

      $percent_complete = number_format($field['percentage'] / $total_percentage, 2) * 100;
      $field['percent_complete'] = $percent_complete;

      if (!$field['pass']) {
        $score = 0;
        break;
      }
      // TODO check if field is blocker -- give correct feedback!
      // OK -- TODO weigh percentages;
      // OK TODO add next field to be completed / updated score
      // OK TODO add next score
    }

    $data['percent'] = number_format($score / $total_percentage, 2) * 100;
  }
}

function smartlink_get_tagged_fields($node) {
  // find smartlink field inside or return empty array
  $fields = content_fields(NULL, $node->type);

  $smartlink_fields = array();
  foreach ($fields as $field_name => $field_val) {
    if ($field_val['type_name'] == $node->type && $field_val['type'] == 'smartlink') {
      $smartlink_fields[] = $field_name;
    }
  }

  $tagged_fields = array();
  foreach ($smartlink_fields as $smartlink_field) {
    $values = $node->{$smartlink_field};
    foreach ($values as $i => $value) {
      $field_name = $value['field_name'];
      $value['type_name'] = $fields[$field_name]['type_name'];
      $value['label'] = $fields[$field_name]['widget']['label'];

      // Find db storage information; will be used by Views
      $db_info = content_database_info($fields[$field_name]);
      $columns = array();
      foreach ($db_info['columns'] as $column_title => $column_data) {
        $columns[] = $column_data['column'];
      }
      $value['columns'] = $columns;

      $tagged_fields[] = $value;
    }
  }

  return $tagged_fields;
}

/**
 * Clear the cache.
 */
function smartlink_clear_cache($smartlink_nid) {
  db_query("DELETE FROM {smartlink} WHERE nid = %d", $smartlink_nid);
}

/**
 * Implementation of hook_views_api().
 */
function smartlink_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'smartlink') .'/views',
  );
}
